package BTree;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;


//List = interface 
//List를 구현한 클래스 = ArrayList,Vector,LinkedList
//Set에서는 중복 X  


@SuppressWarnings("unused")
public class FiveWayBTreeNode {

	private FiveWayBTreeNode parent;
	private List<Integer> keyList;
	private List<FiveWayBTreeNode> children;
	
	private final int maxkey_M=4;
	private int maxchildren=5;
	
	
	//생성자 
	public FiveWayBTreeNode() {
		
		keyList=new ArrayList<Integer>();
		parent=null;
		children=new ArrayList<FiveWayBTreeNode>();
		for(int i=0;i<6;i++) {
			children.add(null);
			
		}
		
	}
	//keyList 접근 
	public List getkeyList() {
		return keyList;
	}
	
	
	//children 접근
	public List getchilderen() {
		return children;
	}
	//children 세팅
	public void setchilderen(FiveWayBTreeNode c,int index) {
		children.set(index, c);
	}
	
	
	//parent 접근 
	public FiveWayBTreeNode getparent() {
		return parent;
	}
	//parent 세팅 
	public void setparent(FiveWayBTreeNode p) {
		parent=p;
	}
	
	
	
	//keyList의 크기 반환 
	public int getkeyListsize() {
		return keyList.size();
	}
	
	//key가 5개일 경우(분리해야할 경우) true, 아닐 시 false 반환 함수 
	public boolean judkeyListsize() {
		if(getkeyListsize()==5) {
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public void addkeyList(Integer e) {
		
		//key가 5미만 일때  
		keyList.add(e);
		Collections.sort(keyList); //정렬
			
		
	}
	
	
	
	//해당 노드의 key 중에서 e 없을 경우 e보다 큰 수 중 가장 작은 수의 인덱스 값 반환 
	public int returnindex(Integer e) {
		int jud=0;
		int index=-1;
		int i;
		for(i=0;i<keyList.size();i++) {
			if(keyList.get(i)>e) {
				//key중에서 큰 값 중 가장 작은 수의 인덱스 값 반환 
				jud=1;
				index=i;
				return index;
			}
			
		}
		if(i==keyList.size()-1&&jud==0) {
			//key중에서 가장 작은 값 중 가장 큰 수의 인덱스 값 반환  
			index=i+1;
		}
		
		
		return index;
	}
	
	//children List 확인해서 모두 null이면 true, 하나라도 존재하면 false 반환 
	public boolean childrencheck() {
		int count=0;
		for(int i=0;i<6;i++) {
			if(children.get(i)==null) {
				count++;
				
			}
		}
		if(count==6) {
			return true;
		}
		else {
			return false;
		}
	}
	
	
	
	
	
}
